#ifndef _BOARD_H_
#define _BOARD_H_
#include <iostream>
#include <fstream>
#include "cell.h"
#include "../subject+observer/observer.h"

using std::string;
using std::vector;
using std::fstream;

//////////////////////////////////////////////////////////////////////////////////////
// Board: responsible for handling everything happens on a board
//        for each player.
//  - init(n): initial the board, set the initial level n and
//             generate a current block waiting for control
//  - getScore(): get the current score
//  - setLevel(n): set the current level to level n
//  - getLevel(n): get the current level
//  - levelUp(): increase one level up
//  - levelDown(): decrease one level down
//  - update(): update the board and ready for next turn
//  - placeNextBlock(): 
//      place the next block on the top of the board (its initial place).
//      return true if placed successfully,
//      return false if there is overlapping. The overlapping cell are marked in X                              
//  - checkCancel(): check if there are lines fulled and clear them
//                   return the number of cleared lines
//  - randomGenerate(): 
//      only suitable for level 3 or 4
//      The following blocks will be generated randomly (based on the level)
//  - fileGenerate(string path): 
//      only suitable for level 3 or 4
//      the following blocks will be generated by the file from path
//  - assignNextBlock(string type): let the next block be the given type
//  - controlBlock(string command): 
//      control the block with given command: left, right etc.
//  - setDebuff(string type, string block): 
//      set the debuff to the board. block is used when the debuff is force
//  - getNextBlock(): return a vector of string to show the current block for print
//  - printCell(int row, int col):
//      print the cell on position (row, col). If it's empty, then reture a space
//  - notify(int n, int m): 
//      be notified when a block (subject) is fully cleared, then update the score
//      n will be the level when the block is generated. m is useless
//////////////////////////////////////////////////////////////////////////////////////

class Block;
class Level;

class Board: public Observer {
    int score;
    bool random_generate;
    Level* lv;
    Block* curr_blcok;
    Block* next_block;
    vector<Block*> Blocks;
    vector<size_t> cellsPerRow;
    vector<vector<Cell>> theBoard;
    fstream infile;

    public:
        Board(int row, int col);
        void init(int n, string path);
        int getScore();
        void setLevel(int n);
        int getLevel();
        void levelUp();
        void levelDown();
        void update();
        bool placeNextBlock();
        int checkCancel();
        void randomGenerate();
        void fileGenerate(string path);
        void assignNextBlock(string type);
        void controlBlock(string command);
        void setDebuff(string type, string block);
        vector<string> getNextBlock();
        string printCell(int row, int col);
        void notify(int n=0, int m=0) override;
        ~Board();
};

#endif